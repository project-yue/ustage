<!DOCTYPE html>
<html lang="en">
  <head>
    <% include partials/head.ejs %>
  </head>
  <body>
    <div class="container-fluid">
    <header>
      <% include partials/header.ejs %>
    </header>
    <main>
      <% include partials/main.ejs %>
    </main>
    <%include partials/modal.ejs %>
    <script>

        function escaped(s) {
          return $("<div></div>").html(s).html();
        }

        function searchUrlFor(name) {
          return 'https://www.google.com/search?q=' + encodeURIComponent(name) + '%20site:wikipedia.org&btnI=3564';
        }

        // return date time
        function getSystemTime(){
          var dt = new Date($.now());
          var time = dt.getHours() + ":" + dt.getMinutes() + ":"+ dt.getSeconds();
          return time;
        }
        // name field
        var name = "";

        var socket = io.connect('/');


        if(name == ""){
          $("#data").attr('placeholder', 'send message as audience');
        }else{
          $("#data").attr('placeholder', 'send message as ' + name);
        }

        // modal name submission binding
        // in progress
        $('#modalNameSubmitBtn').on('click', function (e) {
          // alert(document.getElementById("modalNameContent").value);
          name = document.getElementById("modalNameContent").value;
          // socket.emit('adduser', document.getElementById("modalNameContent").value);
          $("#data").attr('placeholder', 'send message as ' + name);
          socket.emit('disconnected');
          socket.emit('adduser', name);
        });
        // test ends

        // on connection to server, ask for user's name with an anonymous callback
        socket.on('connect', function() {
          // call the server-side function 'adduser' and send one parameter (value of prompt)
          // socket.emit('adduser', name);
          socket.emit('addAudience');
        });

        // listener, whenever the server emits 'addAudience', update audience number.
        // under test
        socket.on('updateAudience', function (number){
            $('#audience').text('Audience ' + number);
        });

        // listener, whenever the server emits 'updatechat', this updates the chat body
        socket.on('updatechat', function (username, data) {
          if(escaped(username) == ""){
            // when user is not logged in
            $('#conversation').prepend(getSystemTime() + ' <b>'+ 'Audience' + ':</b> ' + escaped(data) + "<br/>");
          }else{
            $('#conversation').prepend(getSystemTime() + ' <b>'+  escaped(username) + ':</b> ' + escaped(data) + "<br/>");
          }
        });

        // listener, whenever the server emits 'updateusers', this updates the username list
        socket.on('updateusers', function(data) {
          $('#users').empty();
          $.each(data, function(key, value) {
            $('#users').prepend('<div><a href="' + searchUrlFor(key) + '" target="_blank">' + key + '</div>');
          });
        });

        socket.on('servernotification', function (data) {
          var searchUrl = searchUrlFor(data.username);
          if(data.connected) {
            if(data.to_self) data.username = "you";
            $('#conversation').prepend('connected: <a href="' + searchUrl + '" target="_blank">' + escaped(data.username) + "</a><br/>");
          } else {
            $('#conversation').prepend('disconnected: <a href="' + searchUrl + '" target="_blank">' + escaped(data.username) + "</a><br/>");
          }
        });

        // on load of page
        $(function(){
          // when the client hits ENTER on their keyboard
          $('#data').keypress(function(e) {
            if(e.which == 13) {
              var message = $('#data').val();
              $('#data').val('');
              // tell server to execute 'sendchat' and send along one parameter
              socket.emit('sendchat', message);
            }
          });
        });


      </script>
    </div>
    <!-- This is canvas drawing function with bootstrap -->
    <!-- <script charset="utf-8"> -->

    <!-- </script> -->

    <script>
      function draw() {
        var parent = document.getElementById("container11");
        var canvas = document.createElement("canvas");
        var canvasWidth= $('#container11').width();
        // yl the height of container-fluid is not fixed
        var canvasHeight = $('#container11').height();
        canvas.setAttribute("width", canvasWidth);
        canvas.setAttribute("height", canvasHeight);
        canvas.setAttribute("id", 'mycanvas');
        var left = canvas.offsetLeft,
            top = canvas.offsetTop;
        parent.appendChild(canvas);
        if (canvas.getContext) {
          var ctx = canvas.getContext("2d");

          // ctx.fillStyle = "rgb(200,0,0)";
          // ctx.fillRect(10, 10, 55, 50);
          //
          // ctx.fillStyle = "rgba(0,0,200,0.5)";
          // ctx.fillRect(30, 30, 55, 50);

          // local drawing
          canvas.addEventListener('click', function(event){
            var x =  event.pageX - $("#container11").offset().left,
                y = event.pageY - $("#container11").offset().top;
            ctx.strokeRect(x,y,1,1);
          }, false);
        } else {
          alert("Canvas isn't supported.");
        }
      }

      $(function() {
        draw();
      });
    </script>
  </body>
</html>
